#include <string>

#include "wx/wx.h"
#include "wx/button.h"
#include "wx/valtext.h"

#include <util/Log.h>

#include "CustomFrame.h"
#include "CustomSettings.h"
#include "Utility.h"

CustomFrame::CustomFrame(const wxString& title, const wxPoint& pos, const wxSize& size, long style)
       : wxFrame(NULL, -1, title, pos, size, style)
{
    /**
     * THE FOLLOWING CODE WAS GENERATED BY wxFormBuilder v3.1.59 Beta on Ubuntu 13.04
     * - 8/8/13 - I added the master panel to hold everything. This is not in the designer.
     * - 8/10/13 - Updated wxFormBuilder, brought project forward. Everything
     *             here is now in the designer.
     */

    this->SetSizeHints( wxDefaultSize, wxSize( -1,-1 ) );
    
    wxBoxSizer* masterSizer;
    masterSizer = new wxBoxSizer( wxVERTICAL );
    
    masterPanel = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* masterVBoxSizer;
    masterVBoxSizer = new wxBoxSizer( wxVERTICAL );
    
    wxBoxSizer* topSizer;
    topSizer = new wxBoxSizer( wxVERTICAL );
    
    playerCountLabel = new wxStaticText( masterPanel, wxID_ANY, wxT("There is 1 local player (all human)"), wxDefaultPosition, wxDefaultSize, 0 );
    playerCountLabel->Wrap( -1 );
    topSizer->Add( playerCountLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 8 );
    
    unlimitedLivesCheckBox = new wxCheckBox( masterPanel, myID_UNLIMITED_LIVES, wxT("Unlimited Lives"), wxDefaultPosition, wxDefaultSize, 0 );
    unlimitedLivesCheckBox->SetValue(true); 
    topSizer->Add( unlimitedLivesCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxLEFT, 5 );
    
    
    masterVBoxSizer->Add( topSizer, 1, wxEXPAND, 5 );
    
    wxFlexGridSizer* flexGridSizer;
    flexGridSizer = new wxFlexGridSizer( 4, 2, 0, 0 );
    flexGridSizer->SetFlexibleDirection( wxBOTH );
    flexGridSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    startLevelLabel = new wxStaticText( masterPanel, wxID_ANY, wxT("Start game at level:"), wxDefaultPosition, wxDefaultSize, 0 );
    startLevelLabel->Wrap( -1 );
    flexGridSizer->Add( startLevelLabel, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_LEFT|wxLEFT, 8 );
    
    wxBoxSizer* startLevelSizer;
    startLevelSizer = new wxBoxSizer( wxHORIZONTAL );
    
    startLevelValue = new wxTextCtrl( masterPanel, myID_START_LEVEL, wxT("2"), wxDefaultPosition, wxDefaultSize, 0 );
    startLevelValue->SetMaxLength( 2 ); 
    startLevelSizer->Add( startLevelValue, 0, wxALL, 5 );
    
    startLevelLimitLabel = new wxStaticText( masterPanel, wxID_ANY, wxT("(1-70)"), wxDefaultPosition, wxDefaultSize, 0 );
    startLevelLimitLabel->Wrap( -1 );
    startLevelSizer->Add( startLevelLimitLabel, 0, wxALIGN_CENTER_VERTICAL, 5 );
    
    
    flexGridSizer->Add( startLevelSizer, 0, 0, 0 );
    
    timeLimitCheckBox = new wxCheckBox( masterPanel, myID_TIME_LIMIT_ENABLED, wxT("Game time limit:"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add( timeLimitCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_LEFT|wxLEFT, 5 );
    
    wxBoxSizer* timeLimitSizer;
    timeLimitSizer = new wxBoxSizer( wxHORIZONTAL );
    
    timeLimitValue = new wxTextCtrl( masterPanel, myID_TIME_LIMIT_VALUE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    timeLimitValue->SetMaxLength( 3 ); 
    timeLimitValue->Enable( false );
    
    timeLimitSizer->Add( timeLimitValue, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
    
    minutesLabel = new wxStaticText( masterPanel, wxID_ANY, wxT("(minutes)"), wxDefaultPosition, wxDefaultSize, 0 );
    minutesLabel->Wrap( -1 );
    timeLimitSizer->Add( minutesLabel, 0, wxALIGN_CENTER_VERTICAL, 5 );
    
    
    flexGridSizer->Add( timeLimitSizer, 0, 0, 5 );
    
    levelEndsCheckBox = new wxCheckBox( masterPanel, myID_LEVEL_ENDS, wxT("Level ends when"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add( levelEndsCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_LEFT|wxLEFT, 5 );
    
    wxBoxSizer* remainingPlayersSizer;
    remainingPlayersSizer = new wxBoxSizer( wxHORIZONTAL );
    
    remainingPlayersValue = new wxTextCtrl( masterPanel, myID_REMAINING_PLAYERS, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    remainingPlayersValue->SetMaxLength( 2 ); 
    remainingPlayersValue->Enable( false );
    
    remainingPlayersSizer->Add( remainingPlayersValue, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );
    
    remainingPlayersLabel = new wxStaticText( masterPanel, wxID_ANY, wxT("human players remain."), wxDefaultPosition, wxDefaultSize, 0 );
    remainingPlayersLabel->Wrap( -1 );
    remainingPlayersSizer->Add( remainingPlayersLabel, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5 );
    
    
    flexGridSizer->Add( remainingPlayersSizer, 0, 0, 5 );
    
    advertiseCheckBox = new wxCheckBox( masterPanel, myID_ADVERTISE_ENABLED, wxT("Advertise game:"), wxDefaultPosition, wxDefaultSize, 0 );
    flexGridSizer->Add( advertiseCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_LEFT|wxLEFT, 5 );
    
    advertiseNameValue = new wxTextCtrl( masterPanel, myID_ADVERTISE_NAME, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    advertiseNameValue->SetMaxLength( 0 ); 
    advertiseNameValue->Enable( false );
    
    flexGridSizer->Add( advertiseNameValue, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 5 );
    
    
    masterVBoxSizer->Add( flexGridSizer, 0, wxEXPAND, 5 );
    
    wxBoxSizer* buttonSizer;
    buttonSizer = new wxBoxSizer( wxHORIZONTAL );
    
    cancelButton = new wxButton( masterPanel, myID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    buttonSizer->Add( cancelButton, 0, wxALL, 5 );
    
    startButton = new wxButton( masterPanel, myID_START, wxT("Start"), wxDefaultPosition, wxDefaultSize, 0 );
    buttonSizer->Add( startButton, 0, wxALL, 5 );
    
    
    masterVBoxSizer->Add( buttonSizer, 0, wxALIGN_RIGHT|wxBOTTOM, 5 );
    
    
    masterPanel->SetSizer( masterVBoxSizer );
    masterPanel->Layout();
    masterVBoxSizer->Fit( masterPanel );
    masterSizer->Add( masterPanel, 0, 0, 0 );
    
    
    this->SetSizer( masterSizer );
    this->Layout();
    masterSizer->Fit( this );

    /**
     * END GENERATED CODE
     */
    
    // Wire up the validator
    numericOnlyValidator = new wxTextValidator(wxFILTER_EXCLUDE_CHAR_LIST|wxFILTER_NUMERIC, nullptr);
    wxArrayString excludedChars;
    excludedChars.Add(wxT("e"));
    excludedChars.Add(wxT("-"));
    numericOnlyValidator->SetExcludes(excludedChars);

    startLevelValue->SetValidator(*numericOnlyValidator);
    timeLimitValue->SetValidator(*numericOnlyValidator);
    remainingPlayersValue->SetValidator(*numericOnlyValidator);

    // Connect all the event handlers to their components
    Connect(myID_UNLIMITED_LIVES, wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CustomFrame::OnUnlimitedLivesChange));
    Connect(myID_START_LEVEL, wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CustomFrame::OnStartLevelChange));

    Connect(myID_TIME_LIMIT_ENABLED, wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CustomFrame::OnTimeLimitEnabledChange));
    Connect(myID_TIME_LIMIT_VALUE, wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CustomFrame::OnTimeLimitValueChange));

    Connect(myID_LEVEL_ENDS, wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CustomFrame::OnLevelEndsChange));
    Connect(myID_REMAINING_PLAYERS, wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CustomFrame::OnRemainingPlayersChange));

    Connect(myID_ADVERTISE_ENABLED, wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CustomFrame::OnAdvertiseEnabledChange));
    Connect(myID_ADVERTISE_NAME, wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(CustomFrame::OnAdvertiseNameChange));

    Connect(myID_CANCEL, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CustomFrame::OnCancel));
    Connect(myID_START, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CustomFrame::OnStart));

    // Load the custom settings from the database
    CS.Refresh();
    refresh();
}

CustomFrame::~CustomFrame()
{

}

void CustomFrame::HandleGameType(bool isNetworkGame)
{
    if (isNetworkGame)
        return;

    // If it's not a network game, disable the network related components
    advertiseCheckBox->Disable();
    advertiseNameValue->Disable();
}

void CustomFrame::UpdatePlayerInfoMsg(wxString playerInfoMsg)
{
    playerCountLabel->SetLabel(playerInfoMsg);
}

/**
 * BEGIN EVENT HANDLERS
 */
void CustomFrame::OnUnlimitedLivesChange(wxCommandEvent& event)
{

}

void CustomFrame::OnStartLevelChange(wxCommandEvent& event)
{

}

void CustomFrame::OnTimeLimitEnabledChange(wxCommandEvent& event)
{
    if (timeLimitCheckBox->IsChecked())
        timeLimitValue->Enable();
    else
        timeLimitValue->Disable();
}

void CustomFrame::OnTimeLimitValueChange(wxCommandEvent& event)
{
    
}

void CustomFrame::OnLevelEndsChange(wxCommandEvent& event)
{
    if (levelEndsCheckBox->IsChecked())
        remainingPlayersValue->Enable();
    else
        remainingPlayersValue->Disable();
}

void CustomFrame::OnRemainingPlayersChange(wxCommandEvent& event)
{
    // ?
}

void CustomFrame::OnAdvertiseEnabledChange(wxCommandEvent& event)
{
    if (advertiseCheckBox->IsChecked())
        advertiseNameValue->Enable();
    else
        advertiseNameValue->Disable();
}

void CustomFrame::OnAdvertiseNameChange(wxCommandEvent& event)
{
    // ?
}

void CustomFrame::OnCancel(wxCommandEvent& event)
{
    Close(true);
}

void CustomFrame::OnStart(wxCommandEvent& event)
{
    // Save things to the database


    if (!CS.Save())
        LOG_RECOVERABLE << "Custom Settings failed to save, changes lost.";

    Close(true);
}

void CustomFrame::refresh()
{
    stringstream ss;

    unlimitedLivesCheckBox->SetValue(CS.LivesAreUnlimited());
    
    ss.str("");
    ss << CS.StartLevel();
    startLevelValue->SetValue(Utility::StringToWxString(ss.str().c_str()));

    timeLimitCheckBox->SetValue(CS.TimeLimit() > 0);
    ss.str("");
    ss << CS.TimeLimit();
    timeLimitValue->SetValue(Utility::StringToWxString(ss.str().c_str()));

    levelEndsCheckBox->SetValue(CS.RemainingPlayers() > 0);
    ss.str("");
    ss << CS.RemainingPlayers();
    remainingPlayersValue->SetValue(Utility::StringToWxString(ss.str().c_str()));

    advertiseCheckBox->SetValue(CS.AdvertiseName() != "");
    advertiseNameValue->SetValue(Utility::StringToWxString(CS.AdvertiseName().c_str()));
}
